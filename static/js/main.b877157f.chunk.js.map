{"version":3,"sources":["artist/artist-search-result.tsx","search/search-results.tsx","search/search-service.ts","search/search-landing.tsx","artist/artist-tracks.tsx","artist/artist-service.ts","artist/artist-info.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ArtistSearchResult","props","artistImage","history","useHistory","artist","image","src","alt","name","Grid","container","spacing","item","xs","Typography","variant","className","onClick","event","push","pathname","state","SearchResults","searchHeader","artists","length","searchClickedOnce","map","index","getLastFmImage","size","SearchLanding","useState","searchTerm","setSearchTerm","results","setResults","setSearchClickedOnce","component","FormGroup","TextField","id","label","onChange","target","value","Button","color","axios","get","lastfm","then","response","data","artistmatches","imageLarge","searchArtist","ArtistTracks","artistTracks","setArtistTracks","useEffect","artistId","mbid","error","toptracks","track","tracks","playcount","ArtistInfo","tourBadge","useLocation","artistDetails","setArtistDetails","bio","ontour","Chip","Accordion","AccordionSummary","expandIcon","AccordionDetails","parse","content","App","Container","maxWidth","path","Breadcrumbs","aria-label","href","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b877157f.chunk.js","sourcesContent":["import { Grid, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { Artist } from '../models/artist';\r\n\r\nexport interface ArtistSearchResultProps {\r\n  artist: Artist;\r\n}\r\n\r\nfunction ArtistSearchResult(props: ArtistSearchResultProps) {\r\n  const history = useHistory();\r\n\r\n  const handleClick = (event: any): void => {\r\n    history.push({\r\n      pathname: '/Artist',\r\n      state: { artist: props.artist },\r\n    });\r\n  };\r\n\r\n  let artistImage;\r\n  if (props.artist.image) {\r\n    artistImage = <img src={props.artist.image} alt={`${props.artist.name}`} />;\r\n  } else {\r\n    artistImage = <div>[No Image]</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={1}>\r\n          {artistImage}\r\n        </Grid>\r\n        <Grid item xs={11}>\r\n          <Typography variant=\"h6\" className=\"artist-result\" onClick={handleClick}>\r\n            {props.artist.name}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ArtistSearchResult;\r\n","import { Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport ArtistSearchResult from '../artist/artist-search-result';\r\nimport { Artist } from '../models/artist';\r\n\r\nexport interface SearchProps {\r\n  artists: Artist[];\r\n  searchClickedOnce?: boolean;\r\n}\r\n\r\nfunction SearchResults(props: SearchProps) {\r\n  let searchHeader;\r\n  if (!!props.artists.length) {\r\n    searchHeader = <Typography variant=\"h4\">Results ({props.artists.length})</Typography>;\r\n  } else if (props.searchClickedOnce) {\r\n    searchHeader = <Typography variant=\"h6\">No Results</Typography>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {searchHeader}\r\n      {props.artists?.map((artist, index) => (\r\n        <ArtistSearchResult key={index} artist={artist} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchResults;\r\n","import axios from 'axios';\r\nimport { Artist } from '../models/artist';\r\nimport * as lastfm from '../lastfm.json';\r\n\r\nconst IMAGE_INDEX_SM = 1;\r\nconst IMAGE_INDEX_XL = 4;\r\n\r\nexport function searchArtist(searchTerm: string): Promise<Artist[]> {\r\n  return axios\r\n    .get(`${lastfm.BASE_URL}/2.0/?method=artist.search&artist=${searchTerm}&api_key=${lastfm.API_KEY}&format=json`)\r\n    .then((response: any) => {\r\n      const artists = response.data?.results?.artistmatches.artist;\r\n      return artists.map((artist: any) => {\r\n        return {\r\n          ...artist,\r\n          image: getLastFmImage(artist, IMAGE_INDEX_SM),\r\n          imageLarge: getLastFmImage(artist, IMAGE_INDEX_XL),\r\n        };\r\n      });\r\n    });\r\n}\r\n\r\nfunction getLastFmImage(artist: any, size: number): string {\r\n  return artist.image?.[size]?.['#text'];\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Button, FormGroup, TextField, Typography } from '@material-ui/core';\r\nimport { Artist } from '../models/artist';\r\nimport SearchResults from './search-results';\r\nimport { searchArtist } from './search-service';\r\n\r\nfunction SearchLanding() {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [results, setResults] = useState<Artist[]>([]);\r\n  const [searchClickedOnce, setSearchClickedOnce] = useState(false);\r\n\r\n  const handleClick = (event: any): void => {\r\n    if (searchTerm.length) {\r\n      searchArtist(searchTerm).then((artists: Artist[]) => {\r\n        setResults(artists);\r\n        setSearchClickedOnce(true);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (event.target.value) {\r\n      setSearchTerm(event.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h3\" component=\"h2\">\r\n        Last.fm Search\r\n      </Typography>\r\n\r\n      <FormGroup>\r\n        <TextField id=\"search-term\" label=\"Search for Artist\" variant=\"outlined\" onChange={handleSearchChange} />\r\n\r\n        <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\r\n          Search\r\n        </Button>\r\n      </FormGroup>\r\n\r\n      <SearchResults artists={results} searchClickedOnce={searchClickedOnce} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchLanding;\r\n","import { Typography } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Artist } from '../models/artist';\r\nimport { getTracks } from './artist-service';\r\nimport { Track } from '../models/track';\r\n\r\nexport interface ArtistTrackProps {\r\n  artist: Artist;\r\n}\r\n\r\nfunction ArtistTracks(props: ArtistTrackProps) {\r\n  const [artistTracks, setArtistTracks] = useState<Track[]>([]);\r\n\r\n  useEffect(() => {\r\n    getTracks(props.artist.mbid).then((tracks) => setArtistTracks(tracks));\r\n  }, [props.artist]);\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h5\">Top Tracks</Typography>\r\n      {artistTracks.length === 0 && <Typography>No top tracks for this artist.</Typography>}\r\n      {artistTracks.map((track, index) => {\r\n        return (\r\n          <div key={index}>\r\n            <Typography className=\"track\">\r\n              {track.name} <span className=\"plays\">({`${track.playcount} plays`})</span>\r\n            </Typography>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ArtistTracks;\r\n","import axios from 'axios';\r\nimport * as lastfm from '../lastfm.json';\r\nimport { ArtistDetail } from '../models/artist-detail';\r\nimport { Track } from '../models/track';\r\n\r\nexport function getArtist(artistId: string): Promise<ArtistDetail> {\r\n  return axios\r\n    .get(`${lastfm.BASE_URL}/2.0/?method=artist.getinfo&mbid=${artistId}&api_key=${lastfm.API_KEY}&format=json`)\r\n    .then((response: any) => {\r\n      if (response.data.error) {\r\n        return { name: 'Error Ocurred', bio: {} };\r\n      }\r\n      const artist = response.data?.artist;\r\n      return {\r\n        ...artist,\r\n        ontour: artist.ontour === 0,\r\n      };\r\n    });\r\n}\r\n\r\nexport function getTracks(artistId: string): Promise<Track[]> {\r\n  return axios\r\n    .get(`${lastfm.BASE_URL}/2.0/?method=artist.gettoptracks&mbid=${artistId}&api_key=${lastfm.API_KEY}&format=json`)\r\n    .then((response: any) => {\r\n      if (response.data.error) {\r\n        return [];\r\n      }\r\n      const tracks = response.data?.toptracks.track;\r\n      return tracks.map((track: any) => {\r\n        return {\r\n          ...track,\r\n        };\r\n      });\r\n    });\r\n}\r\n","import { Accordion, AccordionDetails, AccordionSummary, Chip, Grid, Typography } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router';\r\nimport { Artist } from '../models/artist';\r\nimport { ArtistDetail } from '../models/artist-detail';\r\nimport { getArtist } from './artist-service';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport parse from 'html-react-parser';\r\nimport ArtistTracks from './artist-tracks';\r\n\r\nfunction ArtistInfo() {\r\n  const location = useLocation();\r\n  const artist = (location.state as any).artist as Artist;\r\n\r\n  const [artistDetails, setArtistDetails] = useState<ArtistDetail>();\r\n\r\n  useEffect(() => {\r\n    getArtist(artist.mbid).then((artist) => setArtistDetails(artist));\r\n  }, [artist]);\r\n\r\n  let tourBadge;\r\n  if (artistDetails?.ontour) {\r\n    tourBadge = <Chip className=\"tour-badge\" label=\"On Tour\" color=\"secondary\" />;\r\n  } else {\r\n    tourBadge = <Chip className=\"tour-badge\" label=\"Not On Tour\" color=\"primary\" />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"h4\">\r\n            {artist.name}\r\n            {tourBadge}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Accordion>\r\n            <AccordionSummary id=\"bio-header\" expandIcon={<ExpandMoreIcon />}>\r\n              <Typography>Biography</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Typography>{parse(artistDetails?.bio.content ?? 'No biography for this artist.')}</Typography>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ArtistTracks artist={artist} />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ArtistInfo;\r\n","import React from 'react';\nimport { Route, Switch, useHistory } from 'react-router';\nimport { BrowserRouter, Link } from 'react-router-dom';\nimport { Breadcrumbs, Container, Typography } from '@material-ui/core';\nimport './App.css';\nimport SearchLanding from './search/search-landing';\nimport ArtistInfo from './artist/artist-info';\n\nfunction App() {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const history = useHistory();\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"md\">\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/Artist\">\n              <Breadcrumbs aria-label=\"breadcrumb\">\n                <Link color=\"inherit\" href=\"/\" to=\"/\">\n                  Search Home\n                </Link>\n                <Typography color=\"textPrimary\">Artist Information</Typography>\n              </Breadcrumbs>\n              <ArtistInfo />\n            </Route>\n\n            <Route path=\"/\">\n              <SearchLanding />\n            </Route>\n          </Switch>\n        </BrowserRouter>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}